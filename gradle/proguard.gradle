import java.security.cert.Extension
import java.util.jar.JarEntry

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'net.sf.proguard:proguard-gradle:' + project.proguardVersion }
}

task proguard(type: proguard.gradle.ProGuardTask) {
    ext.outJar = "${project.buildDir}/proguard/${jar.archiveName}.jar"
    doFirst{ delete outJar }

    injars  shadowJar.outputs.files
    outjars outJar
    dontobfuscate

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
        libraryjars "${System.getProperty('java.home')}/lib/jce.jar"
        libraryjars "${System.getProperty('java.home')}/../lib/sa-jdi.jar"
        libraryjars "${System.getProperty('java.home')}/../lib/tools.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }

    configurations.testRuntime.resolvedConfiguration.resolvedArtifacts.each { dep ->

        //        libraryjars dep.getFile()

    }


    // Save the obfuscation mapping to a file, so you can de-obfuscate any stack
    // traces later on. Keep a fixed source file attribute and all line number
    // tables to get line numbers in the stack traces.
    // You can comment this out if you're not interested in stack traces.
    /*    
     printmapping 'out.map'
     keepparameternames
     renamesourcefileattribute 'SourceFile'
     keepattributes 'Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,EnclosingMethod'
     */

    keepattributes '*Annotation*'

    // You can print out the seeds that are matching the keep options below.

    //printseeds 'out.seeds'

    // Preserve all public applications.

    keepclasseswithmembers 'public class * { \
        public static void main(java.lang.String[]); \
    }'

    // Preserve all native method names and the names of their classes.

    keepclasseswithmembernames includedescriptorclasses:true, 'class * { \
        native <methods>; \
    }'

    // Preserve the special static methods that are required in all enumeration
    // classes.

    keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    // Explicitly preserve all serialization members. The Serializable interface
    // is only a marker interface, so it wouldn't save them.
    // You can comment this out if your application doesn't use serialization.
    // If your code contains serializable classes that have to be backward
    // compatible, please refer to the manual.

    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

    optimizations '!code/allocation/variable'

    file('gradle/classlist.txt').eachLine{ line ->
        def className = line.replaceAll('(.*)\\$','$1')
        keep "${className}**"
    }

    keep 'class org.apache.log4j.pattern.** {*;}'
    keep 'class org.apache.log4j.** {*;}'
    keep 'class com.jcabi.** {*;}'
    keep 'class org.xnio.** {*;}'
    keep 'class io.undertow.** {*;}'
    keep 'class dorkbox.util.jna.** {*;}'
    keep 'class com.sun.jna.** {*;}'
    keep 'class dorkbox.systemTray.** {*;}'

    dontwarn

}
