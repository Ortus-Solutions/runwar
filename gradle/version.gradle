// -*- coding: utf-8; mode: groovy -*-

buildscript {
    repositories { maven { url "https://plugins.gradle.org/m2/" } }
    dependencies { classpath "org.ajoberstar:grgit:2.2.1" }
}

import org.ajoberstar.grgit.Grgit

ext {
    version = "4.0.0"
    isSnapshot = true
    try{
        git = Grgit.open(dir: file('.'))
        describedCommit = git.describe().toString().trim()
        revision = git.head().id
        File latest = new File("gradle/version")
        version = latest.getText('UTF-8')
        data = version.split('-')
        version=data[0]
        rev=data[1]
        try{
            masterRevision = git.resolve.toCommit(git.resolve.toBranch('origin/master')).id
        } catch (Exception e) {
            println "Unable to get origin/master info:"
            masterRevision = data[2]
            println "Last master revision known:" + masterRevision
        }
        println "Git Info:"
        println "Current Revision:"+ revision
        println "Master Revision:"+ masterRevision
        isSnapshot = masterRevision != revision
        println "Building SNAPSHOT:"+isSnapshot
        //      isSnapshot = describedCommit.matches(".*-[0-9]+-g[0-9a-f]{7}")
        //      version = describedCommit.replaceAll("(.*)-[0-9]+-g[0-9a-f]{7}(.*)", '$1$2') + (isSnapshot ? "-SNAPSHOT" : "")
        
        if(rev != revision){
            File file = new File("gradle/version")
            file.write(version+"-"+revision+"-"+masterRevision)
            println file.text
        }
        version = version +  (isSnapshot ? "-SNAPSHOT" : "")
        // + (git.status().isClean() ? "" : "+dirty")
        println "Building Version ${version} - Branch ${git.branch.current().name}"
        println "Commit message:" + git.head().fullMessage
    } catch (Exception e) {
        e.printStackTrace()
    }
}
version = ext.version

task generateScmInfoFile {
    doLast {
        file(generatedResources).mkdirs()
        def versionFile = new File(generatedResources, "scm.info.properties")
        versionFile.text = """
			git.tags=${git.tag.list().name}
			git.branch=${git.branch.current().name}
			git.dirty=${!git.status().isClean()}
			git.remote.origin.url=${git.remote.list().find { it.name == 'origin' }.url}
			git.commit.id=${git.head().id}
			git.commit.id.abbreviated=${git.head().abbreviatedId}
			git.commit.id.describe=${describedCommit}
			git.commit.user.name=${git.head().author.name}
			git.commit.user.email=${git.head().author.email}
			git.commit.message.full=${git.head().fullMessage.trim()}
			git.commit.message.short=${git.head().shortMessage.trim()}
			git.commit.time=${git.head().dateTime}
        """.stripIndent().trim()
    }
}

task generateVersionFile {
    dependsOn generateScmInfoFile
    doLast {
        file(generatedResources + '/runwar/').mkdirs()
        def versionFile = new File(generatedResources, "runwar/version.properties")
        versionFile.text = 'runwar.version=' + project.version
    }
}

task showVersion { doLast { println version } }

