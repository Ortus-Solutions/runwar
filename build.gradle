import java.util.HashMap
import java.util.List
import java.util.TreeSet

plugins {  id 'com.github.johnrengelman.shadow' version '2.0.2'
  id "com.diffplug.gradle.oomph.ide" version "3.13.0"
 }

apply plugin: 'java'

group = 'org.cfmlprojects'
description = 'RunWar Gradle build script'
apply from: 'gradle/config.gradle'
apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/ide.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

task wrapper( type: Wrapper ){ gradleVersion = '4.6' }

buildDir = file('dist')
def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
    main {
        output.dir(generatedResources, builtBy: 'generateVersionFile')
    }
}

/*
 processResources {
 filesMatching('properties/*.properties') {
 filter ReplaceTokens, tokens: [
 'build.version': project.property("version"),
 'build.timestamp': project.buildTimestamp
 ]
 }
 }
 */

task generateVersionFile {
    doLast {
        file(generatedResources+ '/runwar/').mkdirs()
        def versionFile = new File(generatedResources,"runwar/version.properties")
        versionFile.text = 'runwar.version=' + project.version
    }
}


test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform{ /*jvmArgs "-verbose:class"*/ }

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging { events "passed", "skipped", "failed" }

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}


jar {
    classifier = 'core'
    manifest {
        attributes 'Main-Class': 'runwar.Start'
        attributes 'Can-Redefine-Classes': 'true'
        attributes 'Can-Retransform-Classes': 'true'
        attributes 'Implementation-Version': project.version
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

shadowJar { 
    classifier = null 
      mergeServiceFiles()
}
apply from: 'gradle/proguard.gradle'
apply from: 'gradle/maven.gradle'

task copyToLib(type: Copy) {
    doFirst{ delete "$buildDir/libs" }
    into "$buildDir/libs"
    from configurations.runtime
}

task listUsedClasses() {
    doFirst{
        def verboseFilePath = file('/workspace/runwar/used.txt')
        TreeSet<String> usedJars = new TreeSet<>()
        TreeSet<String> usedClasses = new TreeSet<>();    TreeSet<String> duplicateEntries = new TreeSet<>()
        HashMap<String, String> mergedEntries = new HashMap<>()

        usedJars.clear()
        usedClasses.clear()
        verboseFilePath.eachLine{ line ->
            int pos = line.indexOf("from file")
            if (pos < 0)
                return
            String jarName = line.substring(pos + 11, line.length() - 1)
            if (jarName.contains("/jre") || jarName.contains("\\jre") || !jarName.endsWith(".jar"))
                return
            usedJars.add(jarName)
            String className = line.substring(8, pos - 1)
            usedClasses.add(className)
        }
        usedJars.each{
            println "used jar ${it}"
        }
        usedClasses.each{
            println "keep 'class ${it}'"
        }
    }

}
